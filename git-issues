#!/usr/bin/env python
# coding: utf-8

# git-issue, version 0.3
#
# by John Wiegley <johnw@newartisans.com>

# TODO: (until I can add these bugs to the repo itself!)
#
# 1. use utf-8 throughout
# 2. use -z flag for ls-tree
# 3. use UTC throughout

import sys
import os
import re
import string
import optparse

try:
    from cStringIO import StringIO
except:
    from StringIO import StringIO

import cPickle

from datetime   import datetime
from subprocess import Popen, PIPE
from os.path    import isdir, isfile, join

######################################################################

iso_fmt       = "%Y%m%dT%H%M%S"
options       = None
cache_version = 9

######################################################################

class Person:
    def __init__(self, name, email):
        self.name  = name
        self.email = email

    def __str__(self):
        return "%s <%s>" % (self.name, self.email)

class Issue:
    def __init__(self, issueSet, author, title,
                 summary     = None,
                 description = None,
                 reporters   = [],
                 owners      = [],
                 assigned    = None,
                 carbons     = [],
                 status      = "new",
                 resolution  = None,
                 issue_type  = "defect",
                 components  = [],
                 version     = None,
                 milestone   = None,
                 severity    = "major",
                 priority    = "medium",
                 tags        = []):
        self.issueSet    = issueSet
        self.name        = None
        self.author      = author
        self.title       = title
        self.summary     = summary
        self.description = description
        self.reporters   = reporters
        self.owners      = owners
        self.assigned    = assigned
        self.carbons     = carbons
        self.status      = status
        self.resolution  = resolution
        self.issue_type  = issue_type
        self.components  = components
        self.version     = version
        self.milestone   = milestone
        self.severity    = severity
        self.priority    = priority
        self.tags        = tags
        self.created     = datetime.now()
        self.modified    = None
        self.changes     = {}
        self.dirty       = True

    def mark_dirty(self):
        self.modified       = datetime.now()
        self.dirty          = True
        self.issueSet.dirty = True

    def note_change(self, field, before, after):
        if self.changes.has_key(field):
            data = self.changes[field]
            data[1] = after
        else:
            data = [before, after]
        self.changes[field] = data

    def set_author(self, author):
        self.note_change('author', self.author, author)
        self.author = author

    def set_title(self, title):
        self.note_change('title', self.title, title)
        self.title = title

    def set_summary(self, summary):
        self.note_change('summary', self.summary, summary)
        self.summary = summary

    def set_description(self, description):
        self.note_change('description', self.description, description)
        self.description = description

    def set_reporters(self, reporters):
        self.note_change('reporters', self.reporters, reporters)
        self.reporters = reporters

    def set_owners(self, owners):
        self.note_change('owners', self.owners, owners)
        self.owners = owners

    def set_assigned(self, assigned):
        self.note_change('assigned', self.assigned, assigned)
        self.assigned = assigned

    def set_carbons(self, carbons):
        self.note_change('carbons', self.carbons, carbons)
        self.carbons = carbons

    def set_status(self, status):
        self.note_change('status', self.status, status)
        self.status = status

    def set_resolution(self, resolution):
        self.note_change('resolution', self.resolution, resolution)
        self.resolution = resolution

    def set_issue_type(self, issue_type):
        self.note_change('type', self.issue_type, issue_type)
        self.issue_type = issue_type

    def set_components(self, components):
        self.note_change('components', self.components, components)
        self.components = components

    def set_version(self, version):
        self.note_change('version', self.version, version)
        self.version = version

    def set_milestone(self, milestone):
        self.note_change('milestone', self.milestone, milestone)
        self.milestone = milestone

    def set_severity(self, severity):
        self.note_change('severity', self.severity, severity)
        self.severity = severity

    def set_priority(self, priority):
        self.note_change('priority', self.priority, priority)
        self.priority = priority

    def set_tags(self, tags):
        self.note_change('tags', self.tags, tags)
        self.tags = tags

    def format_long_text(self, text, indent = 13):
        if not text:
            return "<none>"

        lines = string.split(text, '\n')
        
        buffer = StringIO()
        first = True
        for line in lines:
            if not first:
                buffer.write("\n%s" % (" " * indent))
            else:
                first = False
            buffer.write(line)

        return buffer.getvalue()

    def format_people_list(self, people, indent = 13):
        if not people:
            return "<no one yet>"

        buffer = StringIO()
        first = True
        for person in people:
            if not first:
                buffer.write(",\n%s" % (" " * indent))
            else:
                first = False
            buffer.write(person)

        return buffer.getvalue()

    def __getstate__(self):
        odict = self.__dict__.copy() # copy the dict since we change it
        del odict['changes']         # remove change log
        del odict['dirty']           # remove dirty flag
        return odict

    def __setstate__(self,dict):
        self.__dict__.update(dict)   # update attributes
        self.changes = {}
        self.dirty   = False

class IssueSet:
    """An IssueSet refers to a group of issues.  There is always at least one
    IssueSet that refers to all of the issues which exist in a repository.
    Other IssueSet's can be generated from that one as "views" or queries into
    that data.

    In essence, it contains both a set of Issue's which can be looked up by
    their unique identifier, and also certain global definition, like the
    allowable components, etc."""
    def __init__(self):
        self.statuses      = []
        self.resolutions   = []
        self.issue_types   = []
        self.components    = []
        self.versions      = []
        self.milestones    = []
        self.severities    = []
        self.priorities    = []
        self.issues        = {}
        self.issues_HEAD   = None
        self.dirty         = False
        self.cache_version = cache_version
        self.created       = datetime.now()

    def head(self):
        if not self.issues_HEAD:
            self.issues_HEAD = self.current_head()
        return self.issues_HEAD

    def update_head(self, new_head):
        self.issues_HEAD = new_head
        self.dirty       = True

    def current_head(self):
        assert False

    def current_author(self):
        assert False

    def read_project(self):
        pass

    def read_issues(self):
        assert False

    def add_issue(self, issue):
        self.issues[issue.name] = issue
        self.dirty = True

    def read_issue(self, name):
        assert False
    def write_issue(self, issue):
        assert False

    def issues_cache_file(self):
        assert False
    
    def load_state(cls, issueSet):
        """Given a newly created IssueSet object as a template, see if we can
        restore the cached version of the data from disk, and then check whether
        it's still valid.  This can _greatly_ speed up subsequent list and show
        operations.

        The reason why a newly created template exists is to abstract
        DVCS-specific behavior, such as the location of the cache file.

        Thus, a typical session looks like this:

          issueSet = GitIssueSet()   # or whichever DVCS backend you use

          if ... looking at issues list is required ...:
              issueSet = load_issues(issueSet)

              ... use the issue data ..."""
        cache_file = issueSet.issues_cache_file()
        if isfile(cache_file):
            fd = open(cache_file, 'rb')
            if options.verbose:
                print "Cache: Loading saved issues data"
            try:
                cachedIssueSet = cPickle.load(fd)
            finally:
                fd.close()

            if cachedIssueSet.cache_version == issueSet.cache_version and \
               cachedIssueSet.head() == issueSet.current_head():
                if options.verbose:
                    print "Cache: It is valid and usable"
                return cachedIssueSet

            if options.verbose:
                print "Cache: No longer valid, throwing it away"

        # We can't use or rely on the cache, so read all details from disk
        issueSet.read_project()
        issueSet.read_issues()

        return issueSet

    load_state = classmethod(load_state)

    def save_state(self):
        """Write an IssueSet to disk in object form, for fast loading on the next
        iteration.  This is only done if there are actual changes to write."""
        if self.dirty:
            for name in self.issues.keys():
                issue = self.issues[name]
                if issue.dirty:
                    if issue.name:
                        self.update_issue(issue)
                    else:
                        self.write_issue(issue)

            cache_file     = self.issues_cache_file()
            cache_file_dir = os.path.dirname(cache_file)

            if not isdir(cache_file_dir):
                os.makedirs(cache_file_dir)

            fd = open(cache_file, 'wb')
            try:
                cPickle.dump(issueSet, fd)
            finally:
                fd.close()

            self.dirty = False

    def __getstate__(self):
        odict = self.__dict__.copy() # copy the dict since we change it
        del odict['dirty']           # remove dirty flag
        return odict

    def __setstate__(self,dict):
        self.__dict__.update(dict)   # update attributes
        self.dirty   = False

######################################################################

import xml.dom.minidom

def read_object(obj, file_descriptor):
    return XmlReader.read(file_descriptor)

def object_from_string(str):
    return XmlReader.readString(str)

class XmlReader:
    def read(cls, fd):
        doc = xml.dom.minidom.parse(fd)
        data = XmlRipper.rip(doc.firstChild)
        doc.unlink()
        return data

    read = classmethod(read)

    def readString(cls, data):
        doc = xml.dom.minidom.parseString(data)
        data = XmlRipper.rip(doc.firstChild)
        doc.unlink()
        return data

    readString = classmethod(readString)

class XmlStringRipper:
    def rip(cls, node):
        return node.data

    rip = classmethod(rip)

class XmlListRipper:
    def rip(cls, node):
        assert False

    rip = classmethod(rip)

class XmlDateTimeRipper:
    def rip(cls, node):
        return datetime.strptime(node.childNodes[0].data, iso_fmt)

    rip = classmethod(rip)

class XmlPersonRipper:
    def rip(cls, node):
        person = Person(node.childNodes[0].data, node.childNodes[1].data)
        return person

    rip = classmethod(rip)

class XmlIssueRipper:
    def rip(cls, node):
        index = 0
        name  = None
        if node.childNodes[0].nodeName == 'name':
            name   = node.childNodes[0].data
            index += 1

        created = XmlRipper.rip(node.childNodes[index]); index += 1
        author  = XmlRipper.rip(node.childNodes[index]); index += 1
        title   = XmlRipper.rip(node.childNodes[index]); index += 1

        issue = Issue(issueSet, author, title)
        if name:
            issue.name = name
        issue.created = created
        issue.dirty = False

        return issue

    rip = classmethod(rip)

class XmlIssueSetRipper:
    pass

class XmlRipper:
    def rip(cls, node):
        if node.nodeType == Node.TEXT_NODE:
            return XmlStringRipper.rip(node)
        elif node.nodeName == 'datetime':
            return XmlDateTimeRipper.rip(node)
        elif node.nodeName == 'person':
            return XmlPersonRipper.rip(node)
        elif node.nodeName == 'list':
            return XmlListRipper.rip(node)
        elif node.nodeName == 'issue':
            return XmlIssueRipper.rip(node)
        elif node.nodeName == 'issue-set':
            return XmlIssueSetRipper.rip(node)
        else:
            assert False

    rip = classmethod(rip)

######################################################################

def write_object(obj, file_descriptor):
    XmlWriter.write(XmlBuilder.build(obj), fd = file_descriptor)

def object_to_string(obj):
    buffer = StringIO()
    XmlWriter.write(XmlBuilder.build(obj), fd = buffer)
    return buffer.getvalue()

class XmlWriter:
    def write(cls, doc, no_header = False, fd = sys.stdout):
        if no_header:
            buffer = StringIO()
            buffer.write(doc.toprettyxml(indent = "", encoding = "utf-8"))
            fd.write(re.sub('^.+\n', '', buffer.getvalue()))
        else:
            fd.write(doc.toprettyxml(indent = "", encoding = "utf-8"))
        doc.unlink()

    write = classmethod(write)

class XmlStringBuilder:
    def build(cls, data, node, doc):
        node.appendChild(doc.createTextNode(data))

    build = classmethod(build)

class XmlListBuilder:
    def build(cls, data, node, doc):
        element = doc.createElement("list")
        for child in data:
            XmlBuilder.build(doc, element, child)
        node.appendChild(element)

    build = classmethod(build)

class XmlDateTimeBuilder:
    def build(cls, data, node, doc):
        element = doc.createElement("datetime")
        element.appendChild(doc.createTextNode(data.strftime(iso_fmt)))
        node.appendChild(element)

    build = classmethod(build)

class XmlPersonBuilder:
    def build(cls, data, node, doc):
        person = doc.createElement("person")

        name = doc.createElement("name")
        name.appendChild(doc.createTextNode(data.name))
        person.appendChild(name)

        email = doc.createElement("email")
        email.appendChild(doc.createTextNode(data.email))
        person.appendChild(email)

        node.appendChild(person)

    build = classmethod(build)

class XmlIssueBuilder:
    def build(cls, issue, node, doc):
        issueNode = doc.createElement("issue")

        if issue.name:
            name = doc.createElement("name")
            XmlBuilder.build(issue.name, name, doc)
            issueNode.appendChild(name)

        created = doc.createElement("created")
        XmlBuilder.build(issue.created, created, doc)
        issueNode.appendChild(created)

        author = doc.createElement("author")
        XmlBuilder.build(issue.author, author, doc)
        issueNode.appendChild(author)

        title = doc.createElement("title")
        XmlBuilder.build(issue.title, title, doc)
        issueNode.appendChild(title)

        if issue.summary:
            summary = doc.createElement("summary")
            XmlBuilder.build(issue.summary, summary, doc)
            issueNode.appendChild(summary)

        if issue.description:
            description = doc.createElement("description")
            XmlBuilder.build(issue.description, description, doc)
            issueNode.appendChild(description)

        if issue.reporters:
            reporters = doc.createElement("reporters")
            XmlBuilder.build(issue.reporters, reporters, doc)
            issueNode.appendChild(reporters)

        if issue.owners:
            owners = doc.createElement("owners")
            XmlBuilder.build(issue.owners, owners, doc)
            issueNode.appendChild(owners)

        if issue.assigned:
            assigned = doc.createElement("assigned")
            XmlBuilder.build(issue.assigned, assigned, doc)
            issueNode.appendChild(assigned)

        if issue.carbons:
            carbons = doc.createElement("carbons")
            XmlBuilder.build(issue.carbons, carbons, doc)
            issueNode.appendChild(carbons)

        if issue.status:
            status = doc.createElement("status")
            XmlBuilder.build(issue.status, status, doc)
            issueNode.appendChild(status)

        if issue.resolution:
            resolution = doc.createElement("resolution")
            XmlBuilder.build(issue.resolution, resolution, doc)
            issueNode.appendChild(resolution)

        if issue.issue_type:
            issue_type = doc.createElement("type")
            XmlBuilder.build(issue.issue_type, issue_type, doc)
            issueNode.appendChild(issue_type)

        if issue.components:
            components = doc.createElement("components")
            XmlBuilder.build(issue.components, components, doc)
            issueNode.appendChild(components)

        if issue.version:
            version = doc.createElement("version")
            XmlBuilder.build(issue.version, version, doc)
            issueNode.appendChild(version)

        if issue.milestone:
            milestone = doc.createElement("milestone")
            XmlBuilder.build(issue.milestone, milestone, doc)
            issueNode.appendChild(milestone)

        if issue.severity:
            severity = doc.createElement("severity")
            XmlBuilder.build(issue.severity, severity, doc)
            issueNode.appendChild(severity)

        if issue.priority:
            priority = doc.createElement("priority")
            XmlBuilder.build(issue.priority, priority, doc)
            issueNode.appendChild(priority)

        if issue.tags:
            tags = doc.createElement("tags")
            XmlBuilder.build(issue.tags, tags, doc)
            issueNode.appendChild(tags)

        if issue.modified:
            modified = doc.createElement("modified")
            XmlBuilder.build(issue.modified, modified, doc)
            issueNode.appendChild(modified)

        node.appendChild(issueNode)

    build = classmethod(build)

#class XmlIssueChangesBuilder:
#    def build(cls, data, node, doc):
#        changes = doc.createElement("changes")
#        doc.appendChild(changes)
#
#        for field_name in self.changes.keys():
#            field = doc.createElement("field")
#            field.setAttribute("name", field_name)
#
#            data = self.changes[field_name]
#
#            before = doc.createElement("before")
#            XmlBuilder.build(data[0], before, doc)
#            field.appendChild(before)
#
#            after = doc.createElement("after")
#            XmlBuilder.build(data[1], after, doc)
#            field.appendChild(after)
#
#            changes.appendChild(field)
#
#        node.appendChild(changes)
#
#    build = classmethod(build)

class XmlIssueSetBuilder:
    def build(cls, issueSet, node, doc):
        set = doc.createElement("issue-set")

        created = doc.createElement("created")
        XmlBuilder.build(issueSet.created, created, doc)
        set.appendChild(created)

        if issueSet.statuses:
            statuses = doc.createElement("statuses")
            XmlBuilder.build(issueSet.statuses, statuses, doc)
            set.appendChild(statuses)

        if issueSet.resolutions:
            resolutions = doc.createElement("resolutions")
            XmlBuilder.build(issueSet.resolutions, resolutions, doc)
            set.appendChild(resolutions)

        if issueSet.issue_types:
            issue_types = doc.createElement("types")
            XmlBuilder.build(issueSet.issue_types, issue_types, doc)
            set.appendChild(issue_types)

        if issueSet.components:
            components = doc.createElement("components")
            XmlBuilder.build(issueSet.components, components, doc)
            set.appendChild(components)

        if issueSet.versions:
            versions = doc.createElement("versions")
            XmlBuilder.build(issueSet.versions, versions, doc)
            set.appendChild(versions)

        if issueSet.milestones:
            milestones = doc.createElement("milestones")
            XmlBuilder.build(issueSet.milestones, milestones, doc)
            set.appendChild(milestones)

        if issueSet.severities:
            severities = doc.createElement("severities")
            XmlBuilder.build(issueSet.severities, severities, doc)
            set.appendChild(severities)

        if issueSet.priorities:
            priorities = doc.createElement("priorities")
            XmlBuilder.build(issueSet.priorities, priorities, doc)
            set.appendChild(priorities)

        node.appendChild(set)

    build = classmethod(build)

class XmlBuilder:
    def build(cls, data, node = None, doc = None):
        if isinstance(data, datetime):
            assert doc
            XmlDateTimeBuilder.build(data, node, doc)
        elif isinstance(data, Person):
            assert doc
            XmlPersonBuilder.build(data, node, doc)
        elif isinstance(data, list):
            assert doc
            XmlListBuilder.build(data, node, doc)
        elif isinstance(data, str):
            assert doc
            XmlStringBuilder.build(data, node, doc)
        elif isinstance(data, Issue):
            assert not doc
            doc = xml.dom.minidom.Document()
            XmlIssueBuilder.build(data, doc, doc)
        elif isinstance(data, IssueSet):
            assert not doc
            doc = xml.dom.minidom.Document()
            XmlIssueSetBuilder.build(data, doc, doc)
        else:
            assert False

        return doc

    build = classmethod(build)

######################################################################

# Utility function for calling out to Git (this script does not try to
# be a Git library, just an interface to the underlying commands).  It
# supports a 'restart' keyword, which will cause a Python function to
# be called on failure.  If that function returns True, the same
# command will be attempted again.  This can avoid costly checks to
# make sure a branch exists, for example, by simply failing on the
# first attempt to use it and then allowing the restart function to
# create it.

def git(cmd, *args, **kwargs):
    restart = True
    while restart:
        stdin_mode = None
        if kwargs.has_key('input'):
            stdin_mode = PIPE

        if options.verbose:
            print "Command: git-%s %s" % (cmd, string.join(args, ' '))
            if kwargs.has_key('input'):
                print "Input: <<EOF"
                print kwargs['input'],
                print "EOF"

        proc = Popen(('git-' + cmd,) + args, stdin = stdin_mode,
                     stdout = PIPE, stderr = PIPE)

        if kwargs.has_key('input'):
            proc.stdin.write(kwargs['input'])
            proc.stdin.close()

        returncode = proc.wait()
        restart = False
        if returncode != 0:
            if kwargs.has_key('restart'):
                if kwargs['restart'](cmd, args, kwargs):
                    restart = True
            else:
                if not kwargs.has_key('no_stderr') and proc.stderr:
                    sys.stderr.write(proc.stderr.read())
                raise Exception("Could not complete call: git-%s %s" %
                                (cmd, args))

    if not kwargs.has_key('ignore_output'):
        return proc.stdout.read()[:-1]

class GitIssueSet(IssueSet):
    """This object implements all the command necessary to interact with Git
    for the purpose of storing and distributing issues."""
    def __init__(self):
        self.GIT_DIR    = None
        self.GIT_AUTHOR = None
        IssueSet.__init__(self)

    def git_directory(self):
        if self.GIT_DIR is None:
            self.GIT_DIR = git('rev-parse', '--git-dir')
        return self.GIT_DIR

    def issues_cache_file(self):
        return join(self.git_directory(), "issues")

    def create_issue_branch(self, cmd, args, kwargs):
        """If an issues branch already exists at the remote, we simply refer
        to it from now on.  Otherwise, we create a dummy commit in order get
        things started."""
        try:
            hash = git('rev-parse', 'origin/issues', no_stderr = True)
        except:
            hash = git('hash-object', '-w', '--stdin',
                       input = "Created issues branch\n")
            hash = git('mktree', input = "100644 blob %s\tproject\n" % hash)
            hash = git('commit-tree', hash, input = object_to_string(self))

        git('branch', 'issues', hash)
        return True

    def current_head(self):
        return git('rev-parse', 'issues', restart = self.create_issue_branch)

    def current_author(self):
        if self.GIT_AUTHOR is None:
            self.GIT_AUTHOR = Person(git('config', 'user.name'),
                                     git('config', 'user.email'))
        return self.GIT_AUTHOR

    def read_issue(self, name):
        data = git('cat-file', 'blob', '%s/%s/info' % (name[:2], name[2:]),
                   no_stderr = True)
        issue = object_from_string(data)
        return issue

    def update_issue(self, issue):
        pass

    def write_issue(self, issue):
        """Create a new issue in the tracking database by building a commit
        object that holds a reference to a unique blob describing the issue.
        Its uniqueness is determined by hashing the time of creation, the
        creator's name and e-mail address, and the title of the issues.  The
        issue is then kept under a sub-directory of the same name within the
        issues branch, in a fashion similar to `.git/objects`."""
        assert issue.name is None

        # Create a unique blob to represent the new issue.  This is the
        # issue's official object name from now on, and will never change.
        blob = git('hash-object', '-w', '--stdin',
                   input = object_to_string(issue))
        issue.name = blob

        tree = git('mktree', input = "100644 blob %s\tinfo\n" % blob)

        # Merge this blob with existing issue blobs that share the same
        # first two hash digits
        ls_tree = git('ls-tree', '-r', self.head(), '--', blob[:2])
        ls_tree = re.sub('\t%s/' % blob[:2], '\t', ls_tree)
        if ls_tree: ls_tree += '\n'

        tree = git('mktree', input =
                   (ls_tree + "040000 tree %s\t%s\n" % (tree, blob[2:])))

        # Merge it into the tree of issues overall
        ls_tree = git('ls-tree', self.head())
        ls_tree = re.sub('040000 tree [0-9a-f]{40}\t%s\n' % blob[:2],
                         '', ls_tree)
        if ls_tree: ls_tree += '\n'

        tree = git('mktree', input =
                   (ls_tree + "040000 tree %s\t%s\n" % (tree, blob[:2])))

        # Commit the merged tree (though at this moment it's a dangling commit)
        commit = git('commit-tree', tree, '-p', self.head(),
                     input = issue.title)

        # Update the HEAD of the issues branch to point to the commit we
        # just made.
        git('update-ref', 'refs/heads/issues', commit, self.head())

        # Reset the `issues_HEAD` global variable, then return the object
        # name of the new issue.
        self.update_head(commit)

    def read_issues(self):
        ls_tree = string.split(git('ls-tree', '-r', self.head()), '\n')

        self.issues = {}        # clear any existing data

        for line in ls_tree:
            match = re.match('100644 blob ([0-9a-f]{40})\t(project|([0-9a-f]{2})/([0-9a-f]{38})/info)',
                             line)
            assert match

            if match.group(2) == 'project':
                break

            hash = match.group(1)
            assert hash == match.group(3) + match.group(4)

            self.add_issue(self.read_issue(hash))

        return self.issues

######################################################################

parser = optparse.OptionParser()
parser.add_option("-v", "--verbose",
                  action  = "store_true",
                  dest    = "verbose",
                  default = False,
                  help    = "report activity options.verbosely")

(options, args) = parser.parse_args()

def get_issue(issueSet, id):
    issue = None
    try:
        idx = int(id) - 1
        issue = issueSet.issues[issueSet.issues.keys()[idx]]
    except:
        for name in issueSet.issues.keys():
            if re.match(id, name):
                issue = issueSet.issues[name]
                break

    if not issue:
        raise Exception("There is no issue matching the identifier '%s'.\n" % id)

    return issue

######################################################################

if len(args) == 0:
    print "Show help here."
    sys.exit(1)

command = args[0]
args    = args[1:]

######################################################################

# jww (2008-05-12): Pick the appropriate IssueSet to used based on what we
# find in our environment.

issueSet = IssueSet.load_state(GitIssueSet())

######################################################################

if command == "list":
    print
    print "   #    Id     Title                   State  Date  Assign  Tags"
    print "-------------------------------------------------------------------------------"

    index = 1
    for name in issueSet.issues.keys():
        issue = issueSet.issues[name]

        print "%4d  %s  %-23s %-6s %5s %6s %s" % \
            (index, issue.name[:7], issue.title, issue.status,
             issue.created and issue.created.strftime('%m/%d'),
             str(issue.author)[:6], '')

        index += 1

    print

######################################################################

elif command == "show" or command == "dump":
    if len(args) == 0:
        print "Shows needs an index or Id."

    issue = get_issue(issueSet, args[0])
    if command == "show":
        sys.stdout.write("""
      Title: %s
    Summary: %s

Description: %s

     Author: %s
   Reporter: %s
      Owner: %s
   Assigned: %s
         Cc: %s

       Type: %s
     Status: %s
 Resolution: %s
 Components: %s
    Version: %s
  Milestone: %s
   Severity: %s
   Priority: %s
       Tags: %s
   
    Created: %s
   Modified: %s

""" % (issue.title,
       issue.format_long_text(issue.summary),

       issue.format_long_text(issue.description),

       issue.author,
       issue.format_people_list(issue.reporters),
       issue.format_people_list(issue.owners),
       issue.format_people_list(issue.assigned),
       issue.format_people_list(issue.carbons),

       issue.issue_type,
       issue.status,
       issue.resolution or "",
       issue.components or "",
       issue.version or "",
       issue.milestone or "",
       issue.severity,
       issue.priority,
       issue.tags or "",

       issue.created,
       issue.modified))
    else:
        write_object(issue)

######################################################################

elif command == "change":
    if len(args) == 0:
        print "Change needs an issue."

    issue = get_issue(issueSet, args[0])

    # jww (2008-05-13): Need to parse datetime, lists, and people
    eval ("issue.set_%s(\"%s\")" % (args[1], args[2]))

######################################################################

elif command == "new":
    if len(args) == 0:
        print "New needs a title."

    issue = Issue(issueSet, issueSet.current_author(), args[0])
    issueSet.add_issue(issue)

######################################################################

# If any of the commands made the issueSet dirty, (possibly) update the
# repository and write out a new cache

issueSet.save_state()

######################################################################

sys.exit(0)

# git-issue ends here
